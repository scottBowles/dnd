# Generated by Django 5.2.3 on 2025-07-29 04:52

import django.db.models.deletion
import pgvector.django.indexes
import pgvector.django.vector
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="QueryCache",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "query_hash",
                    models.CharField(db_index=True, max_length=64, unique=True),
                ),
                (
                    "query_text",
                    models.TextField(help_text="Original query for debugging"),
                ),
                (
                    "response_data",
                    models.JSONField(help_text="Cached response, sources, etc."),
                ),
                ("tokens_saved", models.IntegerField(default=0)),
                (
                    "hit_count",
                    models.IntegerField(
                        default=0, help_text="How many times this cache was used"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this cache entry expires"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChatSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Auto-generated from first message",
                        max_length=200,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField(help_text="User's question/message")),
                ("response", models.TextField(help_text="RAG bot's response")),
                (
                    "sources",
                    models.JSONField(
                        default=list,
                        help_text="Citations and source links used in the response",
                    ),
                ),
                (
                    "tokens_used",
                    models.IntegerField(
                        default=0, help_text="OpenAI API tokens consumed"
                    ),
                ),
                (
                    "similarity_threshold",
                    models.FloatField(
                        default=0.7,
                        help_text="Minimum similarity score used for this query",
                    ),
                ),
                (
                    "content_types_searched",
                    models.JSONField(
                        default=list,
                        help_text="List of content types that were searched",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="rag_chat.chatsession",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="ContentChunk",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("game_log", "Game Log"),
                            ("character", "Character"),
                            ("place", "Place"),
                            ("item", "Item"),
                            ("artifact", "Artifact"),
                            ("race", "Race"),
                            ("association", "Association"),
                            ("entity", "Generic Entity"),
                            ("custom", "Custom Content"),
                        ],
                        help_text="Type of content this chunk represents",
                        max_length=20,
                    ),
                ),
                (
                    "object_id",
                    models.CharField(
                        help_text="ID of the source object (can be foreign key ID, URL, or custom identifier)",
                        max_length=255,
                    ),
                ),
                (
                    "chunk_text",
                    models.TextField(help_text="The actual text content of this chunk"),
                ),
                (
                    "chunk_index",
                    models.IntegerField(
                        default=0,
                        help_text="Order of this chunk within the source content (0 for single chunks)",
                    ),
                ),
                (
                    "embedding",
                    pgvector.django.vector.VectorField(
                        dimensions=1536,
                        help_text="OpenAI text-embedding-3-small vector",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=dict,
                        help_text="Content-specific metadata: titles, URLs, relationships, dates, etc.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["content_type", "object_id", "chunk_index"],
                "indexes": [
                    models.Index(
                        fields=["content_type"], name="rag_chat_co_content_ef93cc_idx"
                    ),
                    models.Index(
                        fields=["object_id"], name="rag_chat_co_object__8132b0_idx"
                    ),
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="rag_chat_co_content_9f83bf_idx",
                    ),
                    models.Index(
                        fields=["chunk_index"], name="rag_chat_co_chunk_i_a85297_idx"
                    ),
                    pgvector.django.indexes.HnswIndex(
                        ef_construction=64,
                        fields=["embedding"],
                        m=16,
                        name="embedding_hnsw_idx",
                        opclasses=["vector_cosine_ops"],
                    ),
                ],
                "unique_together": {("content_type", "object_id", "chunk_index")},
            },
        ),
    ]
