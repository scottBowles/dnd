version: "3.8"

services:
    # Redis service for Celery broker and result backend
    redis:
        image: redis:7-alpine
        ports:
            - "6379:6379"
        command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
        volumes:
            - redis_data:/data
        restart: unless-stopped
        environment:
            - REDIS_PASSWORD=${REDIS_PASSWORD:-}
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 3s
            retries: 3

    # Django web application
    web:
        build: .
        ports:
            - "8001:8000" # Temporarily use 8001 externally to avoid conflict
        environment:
            - DJANGO_SETTINGS_MODULE=website.settings
            - PYTHONPATH=/app
            - PYTHONUNBUFFERED=1
            - PYTHONDONTWRITEBYTECODE=1
            - REDIS_URL=redis://redis:6379/0
            - CELERY_BROKER_URL=redis://redis:6379/0
            - CELERY_RESULT_BACKEND=redis://redis:6379/0
            - SECRET_KEY=${SECRET_KEY}
            - DEBUG=${DEBUG:-False}
            - DATABASE_URL=${DATABASE_URL}
            - OPENAI_API_KEY=${OPENAI_API_KEY}
            - CLOUDFLARE_R2_ACCESS_KEY_ID=${CLOUDFLARE_R2_ACCESS_KEY_ID}
            - CLOUDFLARE_R2_SECRET_ACCESS_KEY=${CLOUDFLARE_R2_SECRET_ACCESS_KEY}
            - CLOUDFLARE_R2_BUCKET_NAME=${CLOUDFLARE_R2_BUCKET_NAME}
            - CLOUDFLARE_R2_ACCOUNT_ID=${CLOUDFLARE_R2_ACCOUNT_ID}
        depends_on:
            redis:
                condition: service_healthy
        restart: unless-stopped
        volumes:
            - static_volume:/app/staticfiles
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck/"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Celery worker service for background tasks
    celery-worker:
        build: .
        command:
            [
                "celery",
                "-A",
                "website",
                "worker",
                "--loglevel=info",
                "--concurrency=2",
                "--prefetch-multiplier=1",
            ]
        environment:
            - DJANGO_SETTINGS_MODULE=website.settings
            - PYTHONPATH=/app
            - PYTHONUNBUFFERED=1
            - PYTHONDONTWRITEBYTECODE=1
            - REDIS_URL=redis://redis:6379/0
            - CELERY_BROKER_URL=redis://redis:6379/0
            - CELERY_RESULT_BACKEND=redis://redis:6379/0
            - SECRET_KEY=${SECRET_KEY}
            - DEBUG=${DEBUG:-False}
            - DATABASE_URL=${DATABASE_URL}
            - OPENAI_API_KEY=${OPENAI_API_KEY}
            - CLOUDFLARE_R2_ACCESS_KEY_ID=${CLOUDFLARE_R2_ACCESS_KEY_ID}
            - CLOUDFLARE_R2_SECRET_ACCESS_KEY=${CLOUDFLARE_R2_SECRET_ACCESS_KEY}
            - CLOUDFLARE_R2_BUCKET_NAME=${CLOUDFLARE_R2_BUCKET_NAME}
            - CLOUDFLARE_R2_ACCOUNT_ID=${CLOUDFLARE_R2_ACCOUNT_ID}
        depends_on:
            redis:
                condition: service_healthy
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "celery", "-A", "website", "inspect", "ping"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Celery beat service for scheduled tasks (optional - commented out for now)
    # Uncomment when you need scheduled tasks
    # celery-beat:
    #   build: .
    #   command: ["celery", "-A", "website", "beat", "--loglevel=info", "--schedule=/tmp/celerybeat-schedule"]
    #   environment:
    #     - REDIS_URL=redis://redis:6379/0
    #     - CELERY_BROKER_URL=redis://redis:6379/0
    #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
    #     - SECRET_KEY=${SECRET_KEY}
    #     - DEBUG=${DEBUG:-False}
    #     - DATABASE_URL=${DATABASE_URL}
    #   depends_on:
    #     redis:
    #       condition: service_healthy
    #   restart: unless-stopped
    #   volumes:
    #     - beat_schedule:/tmp

    # Optional: Redis Commander for Redis GUI management (development only)
    redis-commander:
        image: rediscommander/redis-commander:latest
        environment:
            - REDIS_HOSTS=local:redis:6379
            - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
            - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
        ports:
            - "8081:8081"
        depends_on:
            redis:
                condition: service_healthy
        restart: unless-stopped
        profiles:
            - dev

    # Optional: Flower for Celery monitoring (development/staging)
    flower:
        build: .
        command: ["celery", "-A", "website", "flower", "--port=5555"]
        ports:
            - "5555:5555"
        environment:
            - CELERY_BROKER_URL=redis://redis:6379/0
            - CELERY_RESULT_BACKEND=redis://redis:6379/0
            - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
        depends_on:
            redis:
                condition: service_healthy
        restart: unless-stopped
        profiles:
            - dev
            - staging

volumes:
    redis_data:
    static_volume:
    # beat_schedule:  # Uncomment when enabling celery-beat service
