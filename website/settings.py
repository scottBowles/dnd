"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv
from gqlauth.settings_type import GqlAuthSettings

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", default="DjangoSettingsNotGettingSecretKey")
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
AIREL_FOLDER_ID = os.environ.get("AIREL_FOLDER_ID")
GOOGLE_SSO_CLIENT_ID = os.environ.get("GOOGLE_SSO_CLIENT_ID")
GOOGLE_SSO_CLIENT_SECRET = os.environ.get("GOOGLE_SSO_CLIENT_SECRET")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
# DEBUG = os.environ.get("DJANGO_DEBUG", "") != "False"
DEBUG = "RENDER" not in os.environ and "COOLIFY_URL" not in os.environ

CSRF_TRUSTED_ORIGINS = [
    "https://airel.onrender.com",
    "https://api.airel.vip",
]
if DEBUG:
    CSRF_TRUSTED_ORIGINS.extend(
        [
            "http://localhost:8000",
        ]
    )

ALLOWED_HOSTS = [
    "airel.vip",
    "api.airel.vip",
    "localhost",
    "127.0.0.1",
]
RENDER_EXTERNAL_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Add Coolify hostname if deployed there
COOLIFY_URL = os.environ.get("COOLIFY_URL")
if COOLIFY_URL:
    # Extract hostname from URL
    from urllib.parse import urlparse

    parsed = urlparse(COOLIFY_URL)
    if parsed.hostname:
        ALLOWED_HOSTS.append(parsed.hostname)

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Application definition

INSTALLED_APPS = [
    # "whitenoise.runserver_nostatic",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "strawberry_django_plus",
    # "strawberry_django",
    "gqlauth",
    "django_extensions",
    "debug_toolbar",
    # "graphiql_debug_toolbar",
    "algoliasearch_django",
    # "generic_relations",
    "association",
    "character",
    "item",
    "place",
    "quest",
    "race",
    "scientia",
    "nucleus",
    "transcription",
    "storages",
    "django_celery_beat",
]

MIDDLEWARE = [
    # "debug_toolbar.middleware.DebugToolbarMiddleware",
    # "graphiql_debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "website.middleware.UpdateLastActivityMiddleware",
    "strawberry_django_plus.middlewares.debug_toolbar.DebugToolbarMiddleware",
    "gqlauth.core.middlewares.django_jwt_middleware",
    "website.middleware.PrintRequestsMiddleware",
]

ROOT_URLCONF = "website.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "website.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        # from render.com example (https://render.com/docs/deploy-django):
        #   Feel free to alter this value to suit your needs.
        #   default='postgresql://postgres:postgres@localhost:5432/mysite'
        # from dj_database_url (https://github.com/jacobian/dj-database-url):
        #   postgres://USER:PASSWORD@HOST:PORT/NAME
        default="postgresql://{}:{}@127.0.0.1:5432/{}".format(
            os.environ.get("POSTGRES_USER", None),
            os.environ.get("POSTGRES_PASSWORD", None),
            os.environ.get("POSTGRES_DB", None),
        ),
        conn_max_age=600,
    )
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOWED_ORIGINS = (
    [
        "http://localhost:8000",
        "http://127.0.0.1:8000",
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:5174",
        "http://127.0.0.1:5174",
        "https://airel.onrender.com",
        "https://airel.vip",
        "https://api.airel.vip",
    ]
    if DEBUG
    else [
        "https://airel.onrender.com",
        "https://airel.vip",
        "https://api.airel.vip",
    ]
)

AUTH_USER_MODEL = "nucleus.User"

INTERNAL_IPS = [
    "127.0.0.1",
]

AUTHENTICATION_BACKENDS = [
    # "graphql_jwt.backends.JSONWebTokenBackend",
    "django.contrib.auth.backends.ModelBackend",
]

ALGOLIA = {
    "APPLICATION_ID": os.environ.get("ALGOLIA_APPLICATION_ID"),
    "API_KEY": os.environ.get("ALGOLIA_API_KEY"),
}

STRAWBERRY_DJANGO = {
    "FIELD_DESCRIPTION_FROM_HELP_TEXT": True,
    "TYPE_DESCRIPTION_FROM_MODEL_DOCSTRING": True,
}
STRAWBERRY_DJANGO_RELAY_MAX_RESULTS = 999

GQL_AUTH = GqlAuthSettings(
    LOGIN_REQUIRE_CAPTCHA=False,
    REGISTER_REQUIRE_CAPTCHA=False,
)

# Cloudflare R2 Storage (django-storages S3Boto3)
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
AWS_ACCESS_KEY_ID = os.environ.get("CLOUDFLARE_R2_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("CLOUDFLARE_R2_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.environ.get("CLOUDFLARE_R2_BUCKET_NAME")
AWS_S3_ENDPOINT_URL = (
    f"https://{os.environ.get('CLOUDFLARE_R2_ACCOUNT_ID')}.r2.cloudflarestorage.com"
)
AWS_S3_REGION_NAME = "auto"
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_ADDRESSING_STYLE = "virtual"
AWS_DEFAULT_ACL = None
AWS_S3_FILE_OVERWRITE = False

# Celery Configuration
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.environ.get(
    "CELERY_RESULT_BACKEND", "redis://localhost:6379/0"
)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Celery task routing
CELERY_TASK_ROUTES = {
    "transcription.tasks.*": {"queue": "transcription"},
}

# Celery worker configuration
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_DISABLE_RATE_LIMITS = False

# Celery task time limits (2 hours for transcription tasks processing multiple large files)
CELERY_TASK_SOFT_TIME_LIMIT = 7200  # 2 hours (120 minutes)
CELERY_TASK_TIME_LIMIT = 7500  # 2 hours 5 minutes (125 minutes, hard limit)
